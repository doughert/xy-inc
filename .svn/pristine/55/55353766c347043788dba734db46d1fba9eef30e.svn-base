package br.org.iamar.firebase.listener;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import br.org.iamar.firebase.model.People;

@Component
public class PeopleListener {

	private static final Logger LOG = LoggerFactory.getLogger(PostListener.class);

	@Autowired
	private FirebaseDatabase firebaseDatabase;

	public void findPeoples() {
		DatabaseReference ref = firebaseDatabase.getReference("people");

		Map<String, People> peoples = new HashMap<String, People>();

		ref.addListenerForSingleValueEvent(new ValueEventListener() {

			@Override
			public void onDataChange(DataSnapshot snapshot) {
				Iterable<DataSnapshot> children = snapshot.getChildren();

				for (DataSnapshot child : children) {
					peoples.put(child.getKey(), child.getValue(People.class));

					LOG.info("Pessoa encontrada: " + child.getKey() + " " + child.getValue(People.class));
				}

			}

			@Override
			public void onCancelled(DatabaseError snapshot) {
				System.out.println("onCancelled chamado");

			}
		});
	}

}
