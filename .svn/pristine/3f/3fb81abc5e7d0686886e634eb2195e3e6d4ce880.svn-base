package br.org.iamar.sgci.task;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import br.org.iamar.carbon.model.InstituicaoTurmaProjetoTarefa;
import br.org.iamar.carbon.service.CarbonService;
import br.org.iamar.firebase.model.Class;
import br.org.iamar.firebase.model.Project;
import br.org.iamar.firebase.model.Task;

@Component
public class UserCarbonImportTask {

	private static final Logger LOG = LoggerFactory.getLogger(UserCarbonImportTask.class);

	@Autowired
	private CarbonService carbonService;

	@Autowired
	private FirebaseDatabase firebaseDatabase;

	private Map<String, Map<String, Task>> taskMap;
	private Map<String, Project> projectMap;
	private Map<String, Class> classMap;

	@Scheduled(fixedRate = 300000)
	public void importInstituicaoTurmaProjetoTarefa() {

		List<InstituicaoTurmaProjetoTarefa> objetos = carbonService.findInstituicaoTurmaProjetoTarefaAtivos();

		LOG.info(objetos.toString());

		makeHashMaps(objetos);

		setMapFirebase(taskMap, "task");
		setMapFirebase(projectMap, "project");
		setMapFirebase(classMap, "class");

	}

	private void makeHashMaps(List<InstituicaoTurmaProjetoTarefa> objetos) {
		taskMap = new HashMap<String, Map<String, Task>>();
		projectMap = new HashMap<String, Project>();
		classMap = new HashMap<String, br.org.iamar.firebase.model.Class>();

		for (InstituicaoTurmaProjetoTarefa objeto : objetos) {

			taskMap = fillTaskMap(objeto);
			projectMap = fillProjectMap(objeto);
			classMap = fillClassMap(objeto);

		}

		LOG.info(taskMap.toString());
		LOG.info(projectMap.toString());
		LOG.info(classMap.toString());

	}

	private Map<String, Class> fillClassMap(InstituicaoTurmaProjetoTarefa objeto) {

		String idTurma = objeto.getIdTurma();

		if (!StringUtils.isEmpty(idTurma)) {
			Class clazz = classMap.get("C" + idTurma);

			if (clazz == null) {
				clazz = new Class(objeto.getNomeTurma());
			}

			Map<String, String> peoples = clazz.getPeoples();

			if (peoples == null) {
				peoples = new HashMap<String, String>();
			}

			if (!StringUtils.isEmpty(objeto.getIdProjeto())) {
				Map<String, String> projects = clazz.getProjects();

				if (projects == null) {
					projects = new HashMap<String, String>();
				}

				projects.put("P" + objeto.getIdProjeto(), objeto.getNomeProjeto());

				clazz.setProjects(projects);
			}

			classMap.put("C" + idTurma, clazz);
		}

		return classMap;
	}

	private Map<String, Project> fillProjectMap(InstituicaoTurmaProjetoTarefa objeto) {

		String idProjeto = objeto.getIdProjeto();

		if (!StringUtils.isEmpty(idProjeto)) {

			Project project = projectMap.get("P" + objeto.getPrefixoId() + idProjeto);

			if (project == null) {
				project = new Project(objeto.getNomeProjeto(), objeto.getNomeProjeto(), objeto.getNomeInstituicao());
			}

			Map<String, String> classes = project.getClasses();

			if (!StringUtils.isEmpty(objeto.getIdTurma())) {

				if (classes == null) {
					classes = new HashMap<String, String>();
				}
				classes.put("C" + objeto.getIdTurma(), objeto.getNomeTurma());

				project.setClasses(classes);

			}

			projectMap.put("P" + objeto.getPrefixoId() + idProjeto, project);

		}

		return projectMap;
	}

	private Map<String, Map<String, Task>> fillTaskMap(InstituicaoTurmaProjetoTarefa objeto) {

		String idProjeto = objeto.getIdProjeto();

		if (!StringUtils.isEmpty(idProjeto)) {

			Map<String, Task> map = taskMap.get("P" + objeto.getPrefixoId() + idProjeto);

			if (map == null) {
				map = new HashMap<String, Task>();
			}

			Task task = map.get("T" + objeto.getPrefixoId() + objeto.getIdTarefa());

			if (task == null) {
				task = new Task();
				task.setName(objeto.getNomeTarefa());
				task.setDescription(objeto.getNomeTarefa());
				task.setStatus(objeto.getStatusTarefa());
				task.setTaskType(objeto.getTipoTarefa());
				task.setLimitDate(objeto.getDataFimTarefa());
			}

			map.put("T" + objeto.getPrefixoId() + objeto.getIdTarefa(), task);
			taskMap.put("P" + objeto.getPrefixoId() + idProjeto, map);

		}

		return taskMap;

	}

	private void setMapFirebase(Map<String, ? extends Object> map, String base) {
		for (String key : map.keySet()) {
			DatabaseReference childRef = firebaseDatabase.getReference(base).child(key);
			childRef.setValue(map.get(key));
		}
	}

}
