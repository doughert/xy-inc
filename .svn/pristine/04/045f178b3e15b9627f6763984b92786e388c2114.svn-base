package br.org.iamar.sgci.executor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import br.org.iamar.carbon.model.Pessoa;
import br.org.iamar.carbon.model.TipoPessoaEnum;
import br.org.iamar.carbon.service.CarbonService;
import br.org.iamar.firebase.model.Class;
import br.org.iamar.firebase.model.FirstAccessApp;
import br.org.iamar.firebase.model.FirstAccessAppStatusEnum;
import br.org.iamar.firebase.model.People;
import br.org.iamar.firebase.model.Profile;
import br.org.iamar.sgci.model.Institution;
import br.org.iamar.sgci.model.User;
import br.org.iamar.sgci.model.UserTypeEnum;

@Component
@Scope("prototype")
public class FirstAccessAppExecutor {

	private static final Logger LOG = LoggerFactory.getLogger(FirstAccessAppExecutor.class);

	@Autowired
	private FirebaseDatabase firebaseDatabase;

	@Autowired
	private CarbonService carbonService;

	private FirstAccessApp firstAccessApp;
	private Map<String, Object> peopleMap;
	private Map<String, Class> classMap;

	public void execute(String key, FirstAccessApp firstAccessApp) {

		this.firstAccessApp = firstAccessApp;

		if (FirstAccessAppStatusEnum.PENDENTE.name().equals(firstAccessApp.getStatus())) {

			List<Pessoa> pessoas = carbonService.findUser(firstAccessApp.getFullname(), firstAccessApp.getBirthdate(),
					firstAccessApp.getDocumentNumber(), firstAccessApp.getClassCode(), firstAccessApp.getUserType());

			if (pessoas.size() > 0) {
				makePeopleHash(pessoas);
				makeClassHash(pessoas);
				updatePeopleProfile();
				putPeopleInClass();
				updateFirstAccessAppStatus(key, FirstAccessAppStatusEnum.USUARIO_ENCONTRADO.name());
			} else if (UserTypeEnum.EDUCANDO.name().equals(firstAccessApp.getUserType())) {
				carbonService.insertEducando(firstAccessApp.getFullname(), firstAccessApp.getBirthdate(),
						firstAccessApp.getDocumentNumber(), firstAccessApp.getClassCode());
				updateFirstAccessAppStatus(key, FirstAccessAppStatusEnum.USUARIO_ENCONTRADO.name());
			} else {
				updateFirstAccessAppStatus(key, FirstAccessAppStatusEnum.USUARIO_NAO_ENCONTRADO.name());
			}
		}
	}

	private void updatePeopleProfile() {

		People pleople = (People) peopleMap.get(firstAccessApp.getUidUser());

		DatabaseReference profilesRef = firebaseDatabase.getReference("people").child(firstAccessApp.getUidUser())
				.child("profiles");
		profilesRef.setValue(pleople.getProfiles());

	}

	private void updateFirstAccessAppStatus(String key, String status) {
		firebaseDatabase.getReference("firstAccessApp").child(key).child("status").setValue(status);
	}

	private void makePeopleHash(List<Pessoa> pessoas) {

		Map<String, User> userMap = new HashMap<String, User>();

		for (Pessoa pessoa : pessoas) {

			userMap = fillUserMap(userMap, pessoa);
		}

		peopleMap = fillPeopleMap(userMap);

	}

	private Map<String, Object> fillPeopleMap(Map<String, User> userMap) {

		Map<String, Object> peopleMap = new HashMap<String, Object>();

		Object[] keys = userMap.keySet().toArray();

		for (Object key : keys) {
			String keyString = (String) key;

			Map<String, String> displayGroup = new HashMap<String, String>();
			Map<String, String> postingGroup = new HashMap<String, String>();

			User userCarbon = userMap.get(keyString);

			fillGroups(displayGroup, postingGroup, userCarbon);

			People people = new People();
			people.setDisplayName(userCarbon.getName());

			Map<String, Object> profiles = new HashMap<String, Object>();

			Profile profile = new Profile();
			profile.setCode(userCarbon.getUserType());
			profile.setName(userCarbon.getUserType());
			profile.setDisplayGroup(displayGroup);
			profile.setPostingGroup(postingGroup);
			profile.setRegion(userCarbon.getRegion());

			profiles.put(userCarbon.getUserType(), profile);

			people.setProfiles(profiles);

			if (userCarbon.getClasses() != null) {
				Map<String, String> classes = new HashMap<String, String>();
				for (br.org.iamar.sgci.model.Class clazz : userCarbon.getClasses()) {

					classes.put("C" + clazz.getId().toString(), clazz.getName());
				}
				profile.setClasses(classes);
			}

			if (userCarbon.getProjects() != null) {
				Map<String, String> projects = new HashMap<String, String>();
				for (br.org.iamar.sgci.model.Project project : userCarbon.getProjects()) {

					projects.put("P" + project.getPrefixoId() + project.getId().toString(), project.getName());
				}
				profile.setProjects(projects);
			}

			peopleMap.put(firstAccessApp.getUidUser(), people);
		}

		return peopleMap;

	}

	private Map<String, User> fillUserMap(Map<String, User> userMap, Pessoa pessoa) {
		String chave = firstAccessApp.getUidUser();

		User user = userMap.get(chave);

		if (user == null) {
			user = new User(null, pessoa.getNome(), pessoa.getTipoPessoa(), pessoa.getRegiao(),
					pessoa.getDataNascimento());
		} else {
			user.setRegion(pessoa.getRegiao());
		}

		if (pessoa.getIdProjeto() != null) {
			user.addProject(new br.org.iamar.sgci.model.Project(Long.parseLong(pessoa.getIdProjeto()),
					pessoa.getNomeProjeto(), pessoa.getPrefixoId()));
		}
		user = setClassAndInstitution(pessoa, user);

		userMap.put(chave, user);

		return userMap;
	}

	private User setClassAndInstitution(Pessoa pessoa, User user) {

		String userType = user.getUserType();

		if (TipoPessoaEnum.EDUCANDO.name().equals(userType) || TipoPessoaEnum.EDUCADOR.name().equals(userType)
				|| TipoPessoaEnum.GESTOR_DE_INSTITUICAO.name().equals(userType)) {
			user.addInstitution(
					new Institution(Long.parseLong(pessoa.getIdInstituicao()), pessoa.getNomeInstituicao()));

			if (TipoPessoaEnum.EDUCANDO.name().equals(userType) || TipoPessoaEnum.EDUCADOR.name().equals(userType)) {
				user.addClass(
						new br.org.iamar.sgci.model.Class(Long.parseLong(pessoa.getIdTurma()), pessoa.getNomeTurma()));
			}
		}

		return user;
	}

	private void putPeopleInClass() {
		firebaseDatabase.getReference("class").addListenerForSingleValueEvent(new ValueEventListener() {

			@Override
			public void onCancelled(DatabaseError arg0) {
				LOG.info("onCancelled");
			}

			@Override
			public void onDataChange(DataSnapshot snapshot) {
				Iterable<DataSnapshot> children = snapshot.getChildren();

				for (DataSnapshot child : children) {
					String classKey = child.getKey();
					if (classMap.containsKey(classKey)) {

						Map<String, Object> map = new HashMap<String, Object>();
						map.put(firstAccessApp.getUidUser(), firstAccessApp.getFullname());

						firebaseDatabase.getReference("class").child(classKey).child("people").updateChildren(map);

					}
				}
			}

		});
	}

	private void fillGroups(Map<String, String> displayGroup, Map<String, String> postingGroup, User userCarbon) {
		if (TipoPessoaEnum.EDUCANDO.name().equals(userCarbon.getUserType())) {

			for (br.org.iamar.sgci.model.Class clazz : userCarbon.getClasses()) {
				postingGroup.put("TURMA" + clazz.getId(), "Educando da turma " + clazz.getName());

				displayGroup.put("TURMA" + clazz.getId(), "Educando da turma " + clazz.getName());
			}

			for (Institution institution : userCarbon.getInstitutions()) {
				displayGroup.put("INSTITUICAO" + institution.getId(),
						"Educando da instituição " + institution.getName());
			}

			displayGroup.put("GIAMAR", "Gestão do IAMAR");
		} else if (TipoPessoaEnum.EDUCADOR.name().equals(userCarbon.getUserType())) {

			for (br.org.iamar.sgci.model.Class clazz : userCarbon.getClasses()) {
				postingGroup.put("TURMA" + clazz.getId(), "Educador da turma " + clazz.getName());

				displayGroup.put("TURMA" + clazz.getId(), "Educador da turma " + clazz.getName());
			}

			for (Institution institution : userCarbon.getInstitutions()) {
				postingGroup.put("GINSTITUICAO" + institution.getId(),
						"Gestão da instituição " + institution.getName());

				displayGroup.put("INSTITUICAO" + institution.getId(), "Instituição " + institution.getName());
			}

			displayGroup.put("GIAMAR", "Gestão do IAMAR");

		} else if (TipoPessoaEnum.GESTOR_DE_INSTITUICAO.name().equals(userCarbon.getUserType())) {

			for (Institution institution : userCarbon.getInstitutions()) {

				postingGroup.put("INSTITUICAO" + institution.getId(), "Instituição " + institution.getName());
				displayGroup.put("GINSTITUICAO" + institution.getId(),
						"Gestão da instituição " + institution.getName());

			}

			postingGroup.put("GINSTITUICOES", "Gestores de Instituição");

			displayGroup.put("GIAMAR", "Gestão do IAMAR");
		} else if (TipoPessoaEnum.GESTOR_DO_IAMAR.name().equals(userCarbon.getUserType())) {

			postingGroup.put("GIAMAR", "Gestão do IAMAR");
			displayGroup.put("GINSTITUICOES", "Gestores de Instituição");
			displayGroup.put("EMBAIXADORES", "Embaixadores");
			displayGroup.put("GIAMAR", "Gestão do IAMAR");

		} else if (TipoPessoaEnum.EMBAIXADOR.name().equals(userCarbon.getUserType())) {

			String region = userCarbon.getRegion().replaceAll(" ", "_");

			postingGroup.put("VOLUNTARIOS_" + region, "Voluntários " + userCarbon.getRegion());
			postingGroup.put("GVENCER", "Grupo Vencer");
			postingGroup.put("EMBAIXADORES", "Embaixadores");

			displayGroup.put("EMBAIXADORES_" + region, "Embaixadores " + userCarbon.getRegion());
			displayGroup.put("GIAMAR", "Gestão do IAMAR");

		} else if (TipoPessoaEnum.VOLUNTARIO.name().equals(userCarbon.getUserType())) {

			String region = userCarbon.getRegion().replaceAll(" ", "_");

			postingGroup.put("EMBAIXADORES_" + region, "Embaixadores " + userCarbon.getRegion());

			displayGroup.put("VOLUNTARIOS_" + region, "Voluntários " + userCarbon.getRegion());
			displayGroup.put("GIAMAR", "Gestão do IAMAR");
		}
	}

	private Map<String, Class> fillClassMap(Pessoa pessoa) {

		String idTurma = pessoa.getIdTurma();

		if (!StringUtils.isEmpty(idTurma)) {
			Class clazz = classMap.get("C" + idTurma);

			if (clazz == null) {
				clazz = new Class(pessoa.getNomeTurma());
			}

			Map<String, String> peoples = clazz.getPeoples();

			if (peoples == null) {
				peoples = new HashMap<String, String>();
			}

			peoples.put(firstAccessApp.getUidUser(), pessoa.getNome());

			clazz.setPeoples(peoples);

			if (!StringUtils.isEmpty(pessoa.getIdProjeto())) {
				Map<String, String> projects = clazz.getProjects();

				if (projects != null && !projects.isEmpty()) {
					String key = projects.keySet().iterator().next();

					// Rule to keep the project bigger id
					if (Long.parseLong(key.replace("P", "")) < Long.parseLong(pessoa.getIdProjeto())) {
						projects = new HashMap<String, String>();
					}
				} else if (projects == null) {
					projects = new HashMap<String, String>();
				}

				projects.put("P" + pessoa.getPrefixoId() + pessoa.getIdProjeto(), pessoa.getNomeProjeto());

				clazz.setProjects(projects);
			}

			classMap.put("C" + idTurma, clazz);
		}

		return classMap;
	}

	private void makeClassHash(List<Pessoa> pessoas) {
		classMap = new HashMap<String, br.org.iamar.firebase.model.Class>();

		for (Pessoa pessoa : pessoas) {

			classMap = fillClassMap(pessoa);

		}

	}

}
